#+TITLE: Elisp Ollama SDK

* Introduction

This project aims to be featureful elisp sdk for [[https://ollama.ai/][Ollama]]. There are existing projects for working with Ollama such as [[https://github.com/zweifisch/ollama][zweifish/ollama]] and [[https://github.com/s-kostyaev/ellama][ellama]]. I want the Elisp Ollama SDK to be a more minimal abstraction over ollama that allows elisp developers to integrate open source (or at least open weight) LLMs into elisp projects using elisp. It will offer much the same level of functionality that the [[https://github.com/ollama/ollama-python][ollama-python]] library offers, but in emacs lisp.

* Usage Examples
First, clone the repo and load the ~ollama.el~ file.
#+begin_src emacs-lisp :session ollamatest
(load-file "./ollama.el")
#+end_src

#+RESULTS:
: t

** Synchronous
This approach makes synchronous (blocking) calls to the Ollama API. This is not recommended if you are using a slower model or generating a lot of tokens as it will freeze your emacs session until it is complete.
*** Completions


#+begin_src emacs-lisp
(pp
 (ollama-generate-completion
  "mistral:latest"
  "why is the sky blue?"
  :options '(:num_predict 10)))
#+end_src

: ((model . "mistral:latest")
:  (created_at . "2024-02-24T14:06:24.157224Z")
:  (response . " The color of the sky appears blue due to a")
:  (done . t)
:  (context .
:           [733 16289 28793 28705 2079 349 272 7212 5045 28804 733 28748 16289 28793 415 3181 302 272 7212 8045 5045 2940 298 264])
:  (total_duration . 7597444792)
:  (load_duration . 7109315792)
:  (prompt_eval_count . 15)
:  (prompt_eval_duration . 176668000)
:  (eval_count . 10)
:  (eval_duration . 310997000))

*** Chat Completions

A chat is represented as a list of alists, where each alist contains two key-value pairs: =role= and =content=. The =role= specifies who is speaking (~system~, ~user~, or ~assistant~), and ~content~ contains the message text. For example:

#+begin_src emacs-lisp
'((("role" . "system") ("content" . "Initial system message."))
  (("role" . "user") ("content" . "Can you help me with elisp programming?"))
  (("role" . "assistant")
   ("content"
    .
    "Absolutely, I'd be happy to help you with Emacs Lisp (Elisp)."))
  (("role" . "user") ("content" . "Great, how do I start?")))
#+end_src

In the context of the ~ollama-generate-chat-completion~ function, this looks like:

#+begin_src emacs-lisp
(pp
 (ollama-generate-chat-completion
  "mistral:latest"
  '((("role" . "system") ("content" . "You are a helpful assistant."))
    (("role" . "user") ("content" . "Can you help me with elisp programming?")))
  :options '((temperature . 0.7) (num_predict . 20))
  :stream
  :json-false))
#+end_src

: ((model . "mistral:latest")
:  (created_at . "2024-02-24T14:07:20.0499Z")
:  (message
:   (role . "assistant")
:   (content . " Absolutely, I'll do my best to assist you with Emacs Lisp (Elisp"))
:  (done . t)
:  (total_duration . 1102761667)
:  (load_duration . 1710167)
:  (prompt_eval_count . 19)
:  (prompt_eval_duration . 370450000)
:  (eval_count . 20)
:  (eval_duration . 729234000))
*** Embeddings

This truncates the embeddings for the purpose of easy reading in this document.

#+begin_src emacs-lisp
(let* ((response (ollama-generate-embeddings "nomic-embed-text" "What is the airspeed velocity of an unladen swallow?"))
       (embedding (alist-get 'embedding response)) ; Assuming response is already an alist
       (truncated-embedding (seq-take embedding 10))
       (formatted-embedding (mapconcat (lambda (x) (format "%.4f" x)) truncated-embedding ", ")))
  (format "((embedding . [%s]))" formatted-embedding))
#+end_src

: ((embedding . [0.8241, 1.8515, -2.8663, -1.1151, 0.8673, 0.7334, -0.3904, 0.2938, -0.6452, 0.5828, ...]))


** Asynchronous Completions
This approach will not block your emacs session. However, it will be revised heavily in the near future. I am still working on finding a good usage pattern. At present, it prints the output to a buffer called ~*ollama-output*~.
*** Completions

Invoking the function:

#+begin_src emacs-lisp
(async-ollama-generate-completion
 "mistral:latest"
 "why is the sky blue?"
 :options '(:num_predict 10))

  #+end_src

  : #<buffer  *http localhost:11434*-158912>

Getting the output from the buffer:

#+begin_src emacs-lisp
 (let ((content
        (with-current-buffer "*ollama-response*"
          ;; Capture the buffer's content.
          (buffer-string))))
   ;; Clear the buffer after capturing its content.
   (with-current-buffer "*ollama-response*"
     (erase-buffer))
   ;; Ensure json-parse-string returns an alist.
   (pp(json-parse-string content :object-type 'alist)))
#+end_src

: ((model . "mistral:latest")
:  (created_at . "2024-02-26T02:46:02.050339Z")
:  (response . " The color of the sky appears blue due to a")
:  (done . t)
:  (context .
:           [733 16289 28793 28705 2079 349 272 7212 5045 28804 733 28748 16289 28793 415 3181 302 272 7212 8045 5045 2940 298 264])
:  (total_duration . 388790958)
:  (load_duration . 1314250)
:  (prompt_eval_duration . 137733000)
:  (eval_count . 10)
:  (eval_duration . 249134000))

*** Chat Completions


#+begin_src emacs-lisp
(async-ollama-generate-chat-completion "mistral:latest"
             '((("role" . "system") ("content" . "You are a helpful assistant."))
               (("role" . "user") ("content" . "Can you help me with elisp programming?")))
             :options '((temperature . 0.7) (num_predict . 20))
             :stream :json-false)
  #+end_src

  : #<buffer  *http localhost:11434*-667842>


#+begin_src emacs-lisp
(let ((content
       (with-current-buffer "*ollama-response*"
         ;; Capture the buffer's content.
         (buffer-string))))
  ;; Clear the buffer after capturing its content.
  (with-current-buffer "*ollama-response*"
    (erase-buffer))
  ;; Ensure json-parse-string returns an alist.
  (pp(json-parse-string content :object-type 'alist)))
#+end_src

: ((model . "mistral:latest")
:  (created_at . "2024-02-26T02:47:11.613687Z")
:  (message
:   (role . "assistant")
:   (content . " Absolutely, I'll do my best to help you with Emacs Lisp (Elisp"))
:  (done . t)
:  (total_duration . 806273708)
:  (load_duration . 1542208)
:  (prompt_eval_count . 19)
:  (prompt_eval_duration . 265775000)
:  (eval_count . 20)
:  (eval_duration . 536168000))

*** Embeddings

#+begin_src emacs-lisp
(async-ollama-generate-embeddings "nomic-embed-text" "What is the airspeed velocity of an unladen swallow?")
#+end_src

: #<buffer  *http localhost:11434*-281797>

#+begin_src emacs-lisp
(let* ((content (with-current-buffer "*ollama-response*"
                  ;; Capture the buffer's content.
                  (buffer-string)))
       ;; Clear the buffer after capturing its content.
       (response (progn
                   (with-current-buffer "*ollama-response*"
                     (erase-buffer))
                   (json-parse-string content :object-type 'alist)))
       (embedding (alist-get 'embedding response)) ; Assuming response is already an alist
       (truncated-embedding (seq-take embedding 10))
       (formatted-embedding (mapconcat (lambda (x) (format "%.4f" x)) truncated-embedding ", ")))
  ;; Return formatted string for display in org mode
  (format "((embedding . [%s]))" formatted-embedding))
#+end_src

: ((embedding . [0.8241, 1.8515, -2.8663, -1.1151, 0.8673, 0.7334, -0.3904, 0.2938, -0.6452, 0.5828, ...]))


** List Models

#+begin_src emacs-lisp
(pp(ollama-list-models))
#+end_src

: ((models
:   ((name . "codellama:7b-code")
:    (model . "codellama:7b-code")
:    (modified_at . "2024-02-04T16:07:52.294534262-06:00")
:    (size . 3825910440)
:    (digest . "fc84f39375bcfe7612f7636a681ebb13d54eb4466e6ea6da07b5d1c37b49994d")
:    (details
:     (parent_model . "")
:     (format . "gguf")
:     (family . "llama")
:     (families)
:     (parameter_size . "7B")
:     (quantization_level . "Q4_0")))
:   ((name . "mistral:latest")
:    (model . "mistral:latest")
:    (modified_at . "2024-02-04T16:15:26.947265019-06:00")
:    (size . 4109865159)
:    (digest . "61e88e884507ba5e06c49b40e6226884b2a16e872382c2b44a42f2d119d804a5")
:    (details
:     (parent_model . "")
:     (format . "gguf")
:     (family . "llama")
:     (families "llama")
:     (parameter_size . "7B")
:     (quantization_level . "Q4_0")))))


** Show model details


#+begin_src emacs-lisp
(let ((details (ollama-show-model-details "mistral:latest"))
      (output ""))
  (dolist (item details output)
    (setq output (concat output (format "%s\n" (car item)))))
  output)
#+end_src

: license
: modelfile
: parameters
: template
: details

** Copy a Model

#+begin_src emacs-lisp
(ollama-copy-model "mistral:latest" "mistral-copy-2")
#+end_src


And now we can list our models to verify that we have made a copy.

#+begin_src emacs-lisp
(let
    ((models-alist (ollama-list-models)) ; Assuming this returns the full structure
     (output ""))
  ;; Access the list of models specifically
  (dolist (model (cdr (assoc 'models models-alist)) output)
    ;; Now `model` is each individual model's alist, so we extract the name correctly
    (let ((name (cdr (assoc 'name model))))
      (setq output (concat output (format "%s\n" name)))))
  output)
#+end_src

: codellama:7b-code
: mistral:latest
: mistral-copy:latest
: mistral-copy-2:latest
: starcoder:3b


** Delete a Model

Let's delete the model copy.

#+begin_src emacs-lisp
(ollama-delete-model "mistral-copy-2")
#+end_src


And now we can list our models to verify that we have deleted the copied model

#+begin_src emacs-lisp
(let
    ((models-alist (ollama-list-models)) ; Assuming this returns the full structure
     (output ""))
  ;; Access the list of models specifically
  (dolist (model (cdr (assoc 'models models-alist)) output)
    ;; Now `model` is each individual model's alist, so we extract the name correctly
    (let ((name (cdr (assoc 'name model))))
      (setq output (concat output (format "%s\n" name)))))
  output)
#+end_src

: codellama:7b-code
: mistral:latest
: mistral-copy:latest
: starcoder:3b



* Project Status
** [2024-02-27 Tue]
Added defuns for copying and deleting models.
** [2024-02-26 Mon]
Added defuns for (1) listing models; (2) 
** [2024-02-25 Sun]
I revised the async function calls to use the ~url~ library instead of calling on ~curl~. Currently the async requests print the json output to a buffer; a callback can be used to determine what is done with the output. I am still thinking about the best usage pattern here but the ability to define custom callbacks should offer some flexibility.
** [2024-02-24 Sat]
I updated the examples in the readme for some clarity. Next big step is still to refactor the asynchronous calls and think of a better usage pattern. I also need to add support for embeddings models.
** [2024-02-10 Sat]
I have basic working versions of synchronous and asynchronous calls to the ~generate~ and ~chat~ endpoints, along with examples in the readme.

Next up:
- try to refactor the asynchronous calls to use `url` rather than starting a `curl` process
- get streaming working
- implement the other endpoints for e.g. listing models
** [2024-02-08 Thu]
I'm experimenting with different ways of handling asynchronous results. For now, in the spirit of maximum flexibility, I'm going to allow the user to define custom callbacks specifying what should be done with the results (in addition to providing a default one, which will print the results to a buffer, and some alternatives to e.g. save to variables or print the results to the minibuffer).
** [2024-02-06 Tue]
I've added a base function for sending requests, a simple process filter for printing the results to a buffer, and specific functions for completions and chat completions that take elisp objects as inputs and pass the correct JSON on to the API. 
** [2024-02-04 Sun]
The project has only just begun! Though I have used ollama via elisp fairly extensively in the past so I expect to make fairly rapid progress.
